#ifndef OPTIXMODEL_H
#define OPTIXMODEL_H

/// @class OptiXModel
/// @author Declan Russell & Toby Gilbert
/// @date 28/01/2014
/// @brief This is a class to import models ready to be used with the OptiX ray tracing engine
/// @todo do something with the material buffer, atm it all just defaults to 0

#include "geometry/AbstractOptixGeometry.h"
#include <assimp/scene.h>
#include <assimp/postprocess.h>
#include <assimp/Importer.hpp>
#include <vector>

class Mesh : public AbstractOptixGeometry
{
public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our default constructor
    /// @param _context - the context to create our geometry within
    //----------------------------------------------------------------------------------------------------------------------
    Mesh(optix::Context &_context);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our default constructor, doesnt really do anything apart from init our members
    /// @param _path - the path to the geometry we want to import
    /// @param _context - the context to create our geometry within
    //----------------------------------------------------------------------------------------------------------------------
    Mesh(std::string _path, optix::Context &_context);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our destructor
    //----------------------------------------------------------------------------------------------------------------------
    ~Mesh();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Imports our geometry
    /// @param _loc - the location of the mesh we wish to import
    //----------------------------------------------------------------------------------------------------------------------
    void importGeometry(std::string _loc);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief accessor to query number of polygons
    //----------------------------------------------------------------------------------------------------------------------
    inline int getNumPolygons(){return m_numPolygons;}
    //----------------------------------------------------------------------------------------------------------------------
protected:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief extracts all meshes and sub meshes from file into our host arrays
    /// @param _node - assimp node
    /// @param _node - assimp scene
    //----------------------------------------------------------------------------------------------------------------------
    void extractMeshData(const aiNode* _node, const aiScene *_scene);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief processes an imported mesh
    //----------------------------------------------------------------------------------------------------------------------
    void processMesh(const aiMesh *_mesh);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief creates our buffers in our OptiX context and sets our data
    //----------------------------------------------------------------------------------------------------------------------
    void createBuffers();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our blannk constructor we dont want this to be availible to the public
    //----------------------------------------------------------------------------------------------------------------------
    Mesh(){}
    //----------------------------------------------------------------------------------------------------------------------
private:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our static mesh intersection program. This is created to remove the need to recompile every time a class is created
    //----------------------------------------------------------------------------------------------------------------------
    static optix::Program m_meshIntersect;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our static mesh intersection program. This is created to remove the need to recompile every time a class is created
    //----------------------------------------------------------------------------------------------------------------------
    static optix::Program m_meshBB;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief static bool to declare if we have created our static intersect and bb programs
    //----------------------------------------------------------------------------------------------------------------------
    static bool m_init;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief number of polygons in our mesh
    //----------------------------------------------------------------------------------------------------------------------
    int m_numPolygons;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our vertex buffer
    //----------------------------------------------------------------------------------------------------------------------
    optix::Buffer m_vertexBuffer;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our normals buffer
    //----------------------------------------------------------------------------------------------------------------------
    optix::Buffer m_normalBuffer;
    //----------------------------------------------------------------------------------------------------------------------
    /// @briefour texture coordinates buffer
    //----------------------------------------------------------------------------------------------------------------------
    optix::Buffer m_texCoordsBuffer;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our tangents buffer
    //----------------------------------------------------------------------------------------------------------------------
    optix::Buffer m_tangentsBuffer;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our bitangents buffer
    //----------------------------------------------------------------------------------------------------------------------
    optix::Buffer m_bitangentsBuffer;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our client side vertices
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<optix::float3> m_vertices;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our client side normals
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<optix::float3> m_normals;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our client side texture coordinates
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<optix::float3> m_texCoords;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our client side tangents
    //----------------------------------------------------------------------------------------------------------------------
    std::vector <optix::float3> m_tangents;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our client side bitangents
    //----------------------------------------------------------------------------------------------------------------------
    std::vector <optix::float3> m_bitangents;
    //----------------------------------------------------------------------------------------------------------------------

};


#endif // OPTIXMODEL_H
